{"version":3,"file":"bundle.js","sources":["../src/main.ts"],"sourcesContent":["/**\r\n * 原因:为了类型安全,为了使用时候不报错\r\n * 返回值类型是协变的,而参数类型是逆变的\r\n * 返回值类型可以传子类,参数可以传父类(参数只能少,返回值只能多)\r\n */\r\n\r\n// 例子\r\n\r\nclass Animal {}\r\nclass Dog extends Animal {\r\n  public name: string = \"dog\";\r\n}\r\n\r\nclass WhiteDog extends Dog {\r\n  public age: number = 10;\r\n}\r\n\r\nclass BlackDog extends Dog {\r\n  public home: string = \"beijing\";\r\n}\r\n\r\nlet animal: Animal = new Animal();\r\nlet dog: Dog = new Dog();\r\nlet whiteDog: WhiteDog = new WhiteDog();\r\nlet blackDog: BlackDog = new BlackDog();\r\n\r\ntype Callback = (dog: Dog) => Dog;\r\n\r\nfunction exec(callback: Callback): void {\r\n  //    callback(animal)     // error animal没有name属性\r\n  //    callback(WhiteDog)  // ok\r\n  callback(dog)\r\n}\r\n\r\n/**\r\n * 4种情况\r\n * 1.参数传子类,返回值子类   // 不可以\r\n * 2.参数值子类,返回值父类   // 不可以\r\n * 3.参数是父类,返回值是父类 // 不可以\r\n * 4.参数是父类,返回值是子类  // 可以\r\n */\r\n\r\n\r\n// 1.参数传子类,返回值子类   // 不可以\r\ntype ChildToChild = (blackDog: BlackDog) => BlackDog;\r\nlet childToChild:ChildToChild;\r\n// exec(childToChild) // error\r\n// ok\r\nexec(function (blackDog) {\r\n    // blackDog 被转成了Dog类型\r\n  return blackDog; // 返回值也被装成了Dog\r\n});\r\n\r\n// 2.参数值子类,返回值父类   // 不可以\r\ntype ChildToParent = (blackDog: BlackDog) => Animal;\r\n let childToParent:ChildToParent;\r\n//  exec(childToChild) // error\r\n// error animal不是Dog的形状,没有name属性\r\n// exec(function(blackDog) {\r\n//     return animal\r\n// });\r\n\r\n\r\n// 3.参数是父类,返回值是父类 // 不可以\r\ntype ParentToParent = (animal: Animal) => Animal;\r\nlet parentToParent:ParentToParent = animal=>animal;\r\n// exec(parentToParent)  // error\r\n\r\n// ok,两个都变成了Dog\r\nexec(function(animal){  // 参数可以少\r\n    \r\n    return animal\r\n});\r\n\r\n// 4.参数是父类,返回值是子类  // 可以\r\ntype ParentToChild = (animal: Animal) => BlackDog;\r\nlet parentToChild:ParentToChild =(animal)=>blackDog;\r\nexec(parentToChild)  // ok\r\nexec(function(animal) {\r\n    console.log(animal)\r\n    return blackDog;\r\n} );\r\nexport {};\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA;;;;;IAMA;IAEA;QAAA;SAAe;QAAD,aAAC;IAAD,CAAC,IAAA;IACf;QAAkB,uBAAM;QAAxB;YAAA,qEAEC;YADQ,UAAI,GAAW,KAAK,CAAC;;SAC7B;QAAD,UAAC;IAAD,CAFA,CAAkB,MAAM,GAEvB;IAED;QAAuB,4BAAG;QAA1B;YAAA,qEAEC;YADQ,SAAG,GAAW,EAAE,CAAC;;SACzB;QAAD,eAAC;IAAD,CAFA,CAAuB,GAAG,GAEzB;IAED;QAAuB,4BAAG;QAA1B;YAAA,qEAEC;YADQ,UAAI,GAAW,SAAS,CAAC;;SACjC;QAAD,eAAC;IAAD,CAFA,CAAuB,GAAG,GAEzB;IAGD,IAAI,GAAG,GAAQ,IAAI,GAAG,EAAE,CAAC;IACzB,IAAI,QAAQ,GAAa,IAAI,QAAQ,EAAE,CAAC;IACxC,IAAI,QAAQ,GAAa,IAAI,QAAQ,EAAE,CAAC;IAIxC,SAAS,IAAI,CAAC,QAAkB;;;QAG9B,QAAQ,CAAC,GAAG,CAAC,CAAA;IACf,CAAC;IAcD;IACA;IACA,IAAI,CAAC,UAAU,QAAQ;;QAErB,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC,CAAC;IAeH;IAEA;IACA,IAAI,CAAC,UAAS,MAAM;QAEhB,OAAO,MAAM,CAAA;IACjB,CAAC,CAAC,CAAC;IAIH,IAAI,aAAa,GAAgB,UAAC,MAAM,IAAG,OAAA,QAAQ,GAAA,CAAC;IACpD,IAAI,CAAC,aAAa,CAAC,CAAA;IACnB,IAAI,CAAC,UAAS,MAAM;QAChB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;QACnB,OAAO,QAAQ,CAAC;IACpB,CAAC,CAAE;;;;;;"}