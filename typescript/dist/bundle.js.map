{"version":3,"file":"bundle.js","sources":["../src/main.ts"],"sourcesContent":["// ts中的泛型\n\n// 函数 接口 类型别名  \n\nfunction createArray<T>(times:number,val:T){\n    let result:T[] = [];\n    for (let index = 0; index < times; index++) {\n        result.push(val)\n        \n    }\n    return result;\n}\n\nlet r1 = createArray<String>(3,'abc')  // <String> 不写,也会根据abc类型自动推导出泛型\n\nconsole.log(r1[0].toLocaleLowerCase())\n\n\n// 泛型可以使用多个\n// 元组 [string,number] => [number,string]\n\nfunction swap<T,K>(tuple:[T,K]):[K,T]{\n    return [tuple[1],tuple[0]]\n}\n\n\nconsole.log(swap(['aaa',111]))\n\n\n\n\n// 函数表达式的写法\n\ninterface MySwap{\n    <T,K>(tuple:[T,K]):[K,T]   // 调用的时候不知道类型\n}\ninterface MySwap2<T,K>{\n    (tuple:[T,K]):[K,T]   // 调用的时候 知道类型\n}\n\n\nconst swap1:MySwap =  <T,K>(tuple:[T,K]):[K,T]=>{\n    return [tuple[1],tuple[0]]\n}\n\nexport { }"],"names":[],"mappings":";;;IAAA;IAEA;IAEA,SAAS,WAAW,CAAI,KAAY,EAAC,GAAK;QACtC,IAAI,MAAM,GAAO,EAAE,CAAC;QACpB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,EAAE,KAAK,EAAE,EAAE;YACxC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;SAEnB;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,IAAI,EAAE,GAAG,WAAW,CAAS,CAAC,EAAC,KAAK,CAAC,CAAA;IAErC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC,CAAA;IAGtC;IACA;IAEA,SAAS,IAAI,CAAM,KAAW;QAC1B,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;IAC9B,CAAC;IAGD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC,CAAC;;;;;;"}